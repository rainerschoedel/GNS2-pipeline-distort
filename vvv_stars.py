#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Sep  4 09:34:41 2024

@author: amartinez
"""

# Cuts off the VVV Ra,Dec lists from the b333 tile over the GNS 2 file. Then 
# uses the header of the VVV cutted off image over the same area (generated by pre_refim.pro)
# to asign xy coordenates to the cutted of RA, Dec lits.

import numpy as np
from astropy.io import fits
from astropy.wcs import WCS
from astropy.coordinates import SkyCoord
import astropy.units as u
import sys
from astropy.table import Table
from astropy.time import Time


vvv_epoch = 2012.29
t_gns = Time('2022-08-02T00:51:44',format='isot') # 2022.586301 #in IDL YMD22DN/365.
gns_epoch = t_gns.decimalyear
print(f'Epoch of GNS data is {gns_epoch}.')
t_diff = gns_epoch - vvv_epoch
print(f'Difference in years to VVV data is {t_diff}.')
field = 20
band = 'H'

VVV_path  ='/home/data/VVV/Fields/J/'

# Load the data from vvv.txt
vvv_data = Table.read('/home/data/VVV/b333-2024-05-13.dat', format = 'ascii')

# Filter: Use only stars with measured PMs and with ok > 0
use_idx = np.nonzero((vvv_data['Ks'] < 15))[0]
vvv_data = vvv_data[use_idx]

# Read the FITS image and get the WCS
fits_image = fits.open(VVV_path + f'Field{field}.fits.gz')
wcs = WCS(fits_image[0].header)

# Get the size of the image in pixels
naxis1 = fits_image[0].header['NAXIS1']
naxis2 = fits_image[0].header['NAXIS2']

#Compute coordinates in image
xy = wcs.all_world2pix(np.c_[vvv_data['ra'],vvv_data['dec']],1)
x = xy[:,0]
y = xy[:,1]

# filter vvv data with position mask
mask = ((x >= 0) & (x < naxis1) & (y >= 0) & (y < naxis2))
vvv_overlap = vvv_data[mask]
print
print
print(f'There are {len(vvv_overlap)} first order alignment stars available for Field {field}.')

#Sort, compute xy positions of selected sample and write to file
vvv_overlap.sort('Ks')
xy = wcs.all_world2pix(np.c_[vvv_overlap['ra'],vvv_overlap['dec']],1)
#Subtract 1 from x and y for consistency with IDL array handling
xy[:,0] = xy[:,0] - 1
xy[:,1] = xy[:,1] - 1
vvv_overlap.add_columns((xy[:,0],xy[:,1]),names = ('x','y'))

#Apply stellar proper motions
ra_pm = vvv_overlap['ra'] + t_diff * (vvv_overlap['pmRA']/1000.0)/3600.0 * np.cos(vvv_overlap['dec']*np.pi/180.)
dec_pm = vvv_overlap['dec'] + t_diff * (vvv_overlap['pmDEC']/1000.0)/3600.0

vvv_tab = Table([vvv_overlap['x'],vvv_overlap['y'],vvv_overlap['J'],vvv_overlap['Ks'],vvv_overlap['ra'],vvv_overlap['dec'],ra_pm,dec_pm],names=['x','y','J','Ks','ra','dec','ra_pm','dec_pm'])

vvv_tab.write(VVV_path + f'Field{field}_stars.txt', format='ascii', overwrite = True)
print(f'There are {len(vvv_overlap)} alignment stars available for Field {field}.')


# Close the FITS file
fits_image.close()
